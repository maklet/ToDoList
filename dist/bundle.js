!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="./public",o(o.s=2)}([function(e,t){e.exports=require("express")},function(e,t){e.exports=require("mongoose")},function(e,t,o){o(3),e.exports=o(8)},function(e,t,o){(function(t){const n=o(0),r=o(1),i=o(4),s=process.env.MONGO_ATLAS_URL,u=o(6),c=n(),d=o(7);c.use(n.urlencoded({extended:!0})),c.set("view engine","ejs"),c.use(d({src:u.join(t,"scss"),dest:u.join(t,"public")})),c.use(n.static(u.join(t,"public"))),c.use(i);const a=process.env.PORT||8002;r.connect(s,{useUnifiedTopology:!0,useNewUrlParser:!0}).then(()=>{console.log("Check port 8002"),c.listen(a)}),e.exports=c}).call(this,"/")},function(e,t,o){const n=o(0),r=o(5),i=n.Router();i.route("/todolist").get(async(e,t)=>{const o=e.query.page||1,n=e.query.sort,i=await r.find(),s=await r.find().skip(3*(o-1)).limit(3).sort({text:n}),u=Math.ceil(i.length/3);t.render("todolist",{threeTodos:s,pageCount:u,currentPage:o})}).post(async(e,t)=>{const o=new r({text:e.body.text});await o.save((e,o)=>{e?(console.log(e),t.send(e.message)):t.redirect("/todolist")})}),i.get("/delete/:id",async(e,t)=>{console.log(e.params.id),await r.deleteOne({_id:e.params.id}),t.redirect("/todolist")}),i.get("/updatetask/:id",async(e,t)=>{const o=await r.findById({_id:e.params.id});t.render("updatetask",{updateTask:o})}),i.post("/updatetask/:id",async(e,t)=>{await r.updateOne({_id:e.body.id},{$set:{text:e.body.text}}),console.log(e.body),console.log(e.body.id),t.redirect("/todolist")}),e.exports=i},function(e,t,o){const n=o(1),r=new n.Schema({text:{type:String,required:!0}}),i=n.model("Task",r);e.exports=i},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("node-sass-middleware")},function(e,t){}]);